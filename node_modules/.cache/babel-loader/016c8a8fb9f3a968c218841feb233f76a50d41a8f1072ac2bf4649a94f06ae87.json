{"ast":null,"code":"// import React, { useState } from \"react\";\n// import Button from \"./button\";\n\n// const Modal = (props, { isOpen, onClose }) => {\n//   const [name, setName] = useState('');\n//   const [phonenumber, setPhonenumber] = useState('');\n//   const [birthday, setBirthday] = useState('');\n//   const [relation, setRelation] = useState('');\n//   const [nationality, setNationality] = useState('');\n//   const [city, setCity] = useState('');\n\n//   const [isValidName, setIsValidName] = useState(false);\n//   const [isValidPhonenumber, setIsValidPhonenumber] = useState(false);\n//   const [isValidBirthday, setIsValidBirthday] = useState(false);\n//   const [isValidRelation, setIsValidRelation] = useState(false);\n//   const [isValidNationality, setIsValidNationality] = useState(false);\n//   const [isValidCity, setIsValidCity] = useState(false);\n\n//   const onChangeName = (e) => {\n//     const currentName = e.target.value;\n//     setName(currentName);\n\n//     if (currentName.trim().length <= 0 || currentName.trim().length > 30) {\n//       setIsValidName(false);\n//     } else {\n//       setIsValidName(true);\n//     }\n//   };\n\n//   const onChangePhone = (e) => {\n//     const phone = /^\\d{3}-\\d{4}-\\d{4}$/;\n//     const currentPN = e.target.value;\n//     setPhonenumber(currentPN);\n\n//     if (!phone.test(currentPN)) {\n//       setIsValidPhonenumber(false);\n//     } else {\n//       setIsValidPhonenumber(true);\n//     }\n//   };\n\n//   const onChangeBirth = (e) => {\n//     const date = /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])$/;\n//     const currentBirth = e.target.value;\n//     setBirthday(currentBirth);\n\n//     if (!date.test(currentBirth)) {\n//       setIsValidBirthday(false);\n//     } else {\n//       setIsValidBirthday(true);\n//     }\n//   };\n\n//   const onChangeRelation = (e) => {\n//     const currentRelation = e.target.value;\n//     setRelation(currentRelation);\n\n//     if (currentRelation.trim().length <= 0 || currentRelation.trim().length > 100) {\n//       setIsValidRelation(false);\n//     } else {\n//       setIsValidRelation(true);\n//     }\n//   };\n\n//   const onChangeNationality = (e) => {\n//     const currentNationality = e.target.value;\n//     setNationality(currentNationality);\n\n//     if (currentNationality.trim().length <= 0 || currentNationality.trim().length > 100) {\n//       setIsValidNationality(false);\n//     } else {\n//       setIsValidNationality(true);\n//     }\n//   };\n\n//   const onChangeCity = (e) => {\n//     const currentCity = e.target.value;\n//     setCity(currentCity);\n\n//     if (currentCity.trim().length <= 0 || currentCity.trim().length > 100) {\n//       setIsValidCity(false);\n//     } else {\n//       setIsValidCity(true);\n//     }\n//   };\n\n//   const formIsValid = () => isValidName && isValidPhonenumber && isValidBirthday && isValidRelation && isValidNationality && isValidCity;\n\n//   return(\n//     <div className=\"modal_container\" onClick={props.onClose}>\n//       <div className=\"modal_content\">\n//         <form>\n//           <h3 className=\"modal_title\">{props.title}</h3>\n//           <div className=\"input-element\">\n//             <label htmlFor=\"name\">Name</label>\n//             <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"HongGildong\" value=\"\" onChange={onChangeName}/>\n//             {isValidName ? <p className=\"warning\" id=\"warning-name\">The name's length must be between 1 ~ 30.</p> : <p/>}\n//           </div>\n\n//           <div className=\"input-element\">\n//             <label htmlFor=\"phonenumber\">Phone Number</label>\n//             <input type=\"text\" name=\"phonenumber\" id=\"phonenumber\" placeholder=\"xxx-xxxx-xxxx\" value=\"\" onChange={onChangePhone}/>\n//             {isValidPhonenumber ? <p className=\"warning\" id=\"warning-phonenumber\">Invalid form of Phone Number.</p> : <p/>}\n//           </div>\n\n//           <div className=\"input-element\">\n//             <label htmlFor=\"birthday\">Birthday</label>\n//             <input type=\"text\" name=\"birthday\" id=\"birthday\" placeholder=\"00/00\" value=\"\" onChange={onChangeBirth}/>\n//             {isValidBirthday ? <p className=\"warning\" id=\"warning-birthday\">Invalid form of birthday.</p> : <p/>}\n//           </div>\n\n//           <div className=\"input-element\">\n//             <label htmlFor=\"relation\">Relation</label>\n//             <input type=\"text\" name=\"relation\" id=\"relation\" placeholder=\"coworker\" value=\"\" onChange={onChangeRelation}/>\n//             {isValidRelation ? <p className=\"warning\" id=\"warning-relation\">Relation input cannot be the blank.</p> : <p/>}\n//           </div>\n\n//           <div className=\"input-element\">\n//             <label htmlFor=\"nationality\">Nationality</label>\n//             <input type=\"text\" name=\"nationality\" id=\"nationality\" placeholder=\"Korea\" value=\"\" onChange={onChangeNationality}/>\n//             {isValidNationality ? <p className=\"warning\" id=\"warning-nationality\">Nationality input cannot be the blank.</p> : <p/>}\n//           </div>\n\n//           <div className=\"input-element\">\n//             <label htmlFor=\"city\">City</label>\n//             <input type=\"text\" name=\"city\" id=\"city\" placeholder=\"Seoul\" value=\"\" onChange={onChangeCity}/>\n//             {isValidCity ? <p className=\"warning\" id=\"warning-city\">City input cannot be the blank.</p> : <p/>}\n//           </div>\n\n//           <Button btn=\"submit\" content=\"Submit\"/>\n//           <Button btn=\"cancel\" content=\"Cancel\" onClick={props.onClose}/>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Modal;","map":{"version":3,"names":[],"sources":["/Users/zuru/crud_react/src/components/modal.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import Button from \"./button\";\n\n// const Modal = (props, { isOpen, onClose }) => {\n//   const [name, setName] = useState('');\n//   const [phonenumber, setPhonenumber] = useState('');\n//   const [birthday, setBirthday] = useState('');\n//   const [relation, setRelation] = useState('');\n//   const [nationality, setNationality] = useState('');\n//   const [city, setCity] = useState('');\n\n//   const [isValidName, setIsValidName] = useState(false);\n//   const [isValidPhonenumber, setIsValidPhonenumber] = useState(false);\n//   const [isValidBirthday, setIsValidBirthday] = useState(false);\n//   const [isValidRelation, setIsValidRelation] = useState(false);\n//   const [isValidNationality, setIsValidNationality] = useState(false);\n//   const [isValidCity, setIsValidCity] = useState(false);\n\n//   const onChangeName = (e) => {\n//     const currentName = e.target.value;\n//     setName(currentName);\n    \n//     if (currentName.trim().length <= 0 || currentName.trim().length > 30) {\n//       setIsValidName(false);\n//     } else {\n//       setIsValidName(true);\n//     }\n//   };\n\n//   const onChangePhone = (e) => {\n//     const phone = /^\\d{3}-\\d{4}-\\d{4}$/;\n//     const currentPN = e.target.value;\n//     setPhonenumber(currentPN);\n    \n//     if (!phone.test(currentPN)) {\n//       setIsValidPhonenumber(false);\n//     } else {\n//       setIsValidPhonenumber(true);\n//     }\n//   };\n\n//   const onChangeBirth = (e) => {\n//     const date = /^(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])$/;\n//     const currentBirth = e.target.value;\n//     setBirthday(currentBirth);\n    \n//     if (!date.test(currentBirth)) {\n//       setIsValidBirthday(false);\n//     } else {\n//       setIsValidBirthday(true);\n//     }\n//   };\n\n//   const onChangeRelation = (e) => {\n//     const currentRelation = e.target.value;\n//     setRelation(currentRelation);\n    \n//     if (currentRelation.trim().length <= 0 || currentRelation.trim().length > 100) {\n//       setIsValidRelation(false);\n//     } else {\n//       setIsValidRelation(true);\n//     }\n//   };\n\n//   const onChangeNationality = (e) => {\n//     const currentNationality = e.target.value;\n//     setNationality(currentNationality);\n    \n//     if (currentNationality.trim().length <= 0 || currentNationality.trim().length > 100) {\n//       setIsValidNationality(false);\n//     } else {\n//       setIsValidNationality(true);\n//     }\n//   };\n\n//   const onChangeCity = (e) => {\n//     const currentCity = e.target.value;\n//     setCity(currentCity);\n    \n//     if (currentCity.trim().length <= 0 || currentCity.trim().length > 100) {\n//       setIsValidCity(false);\n//     } else {\n//       setIsValidCity(true);\n//     }\n//   };\n\n//   const formIsValid = () => isValidName && isValidPhonenumber && isValidBirthday && isValidRelation && isValidNationality && isValidCity;\n\n\n//   return(\n//     <div className=\"modal_container\" onClick={props.onClose}>\n//       <div className=\"modal_content\">\n//         <form>\n//           <h3 className=\"modal_title\">{props.title}</h3>\n//           <div className=\"input-element\">\n//             <label htmlFor=\"name\">Name</label>\n//             <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"HongGildong\" value=\"\" onChange={onChangeName}/>\n//             {isValidName ? <p className=\"warning\" id=\"warning-name\">The name's length must be between 1 ~ 30.</p> : <p/>}\n//           </div>\n      \n//           <div className=\"input-element\">\n//             <label htmlFor=\"phonenumber\">Phone Number</label>\n//             <input type=\"text\" name=\"phonenumber\" id=\"phonenumber\" placeholder=\"xxx-xxxx-xxxx\" value=\"\" onChange={onChangePhone}/>\n//             {isValidPhonenumber ? <p className=\"warning\" id=\"warning-phonenumber\">Invalid form of Phone Number.</p> : <p/>}\n//           </div>\n      \n//           <div className=\"input-element\">\n//             <label htmlFor=\"birthday\">Birthday</label>\n//             <input type=\"text\" name=\"birthday\" id=\"birthday\" placeholder=\"00/00\" value=\"\" onChange={onChangeBirth}/>\n//             {isValidBirthday ? <p className=\"warning\" id=\"warning-birthday\">Invalid form of birthday.</p> : <p/>}\n//           </div>\n      \n//           <div className=\"input-element\">\n//             <label htmlFor=\"relation\">Relation</label>\n//             <input type=\"text\" name=\"relation\" id=\"relation\" placeholder=\"coworker\" value=\"\" onChange={onChangeRelation}/>\n//             {isValidRelation ? <p className=\"warning\" id=\"warning-relation\">Relation input cannot be the blank.</p> : <p/>}\n//           </div>\n      \n//           <div className=\"input-element\">\n//             <label htmlFor=\"nationality\">Nationality</label>\n//             <input type=\"text\" name=\"nationality\" id=\"nationality\" placeholder=\"Korea\" value=\"\" onChange={onChangeNationality}/>\n//             {isValidNationality ? <p className=\"warning\" id=\"warning-nationality\">Nationality input cannot be the blank.</p> : <p/>}\n//           </div>\n      \n//           <div className=\"input-element\">\n//             <label htmlFor=\"city\">City</label>\n//             <input type=\"text\" name=\"city\" id=\"city\" placeholder=\"Seoul\" value=\"\" onChange={onChangeCity}/>\n//             {isValidCity ? <p className=\"warning\" id=\"warning-city\">City input cannot be the blank.</p> : <p/>}\n//           </div>\n          \n//           <Button btn=\"submit\" content=\"Submit\"/>\n//           <Button btn=\"cancel\" content=\"Cancel\" onClick={props.onClose}/>\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Modal;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}